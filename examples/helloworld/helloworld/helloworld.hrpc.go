// Code generated by github.com/hooto/hrpc4g
// source: helloworld.proto
// DO NOT EDIT!

package helloworld

import "context"

import "github.com/golang/protobuf/proto"
import "github.com/hooto/hrpc4g/hrpc"

type HrpcGreeterClientInterface interface {
	SayHello(ctx context.Context, in *HelloRequest) (*HelloReply, error)
}

type hrpcGreeterClient struct {
	c *hrpc.Client
}

func (c *hrpcGreeterClient) SayHello(ctx context.Context, in *HelloRequest) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.c.Invoke(ctx, "helloworld.Greeter/SayHello", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func HrpcGreeterClient(c *hrpc.Client) HrpcGreeterClientInterface {
	return &hrpcGreeterClient{
		c: c,
	}
}

var HrpcGreeterServiceDesc = &hrpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []hrpc.ServiceMethodDesc{
		{
			MethodName: "SayHello",
			Handler:    hrpc_Greeter_SayHello_Handler,
		},
	},
}

func hrpc_Greeter_SayHello_Handler(srv interface{}, ctx context.Context, inb []byte) (proto.Message, error) {
	in := new(HelloRequest)
	if err := proto.Unmarshal(inb, in); err != nil {
		return nil, err
	}
	return srv.(GreeterServer).SayHello(ctx, in)
}